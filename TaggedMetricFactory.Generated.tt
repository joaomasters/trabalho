<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Collections.Immutable;

namespace StackExchange.Metrics
{
    using StackExchange.Metrics.Infrastructure;
    using StackExchange.Metrics.Metrics;

<#
    for (int dimensions = 1; dimensions < 6; dimensions++)
    {
        var typeNamesArray = new string[dimensions];
        var argNamesArray = new string[dimensions];
        var propNamesArray = new string[dimensions];
        var ctorArgsArray = new string[dimensions];
        var getArgsArray = new string[dimensions];
        var createArgsArray = new string[dimensions];
        var keyArray = new string[dimensions];
        for (var i = 1; i <= dimensions; i++)
        {
            typeNamesArray[i - 1] = "TTag" + i;
            argNamesArray[i - 1] = "tag" + i;
            propNamesArray[i - 1] = "Tag" + i;
            ctorArgsArray[i - 1] = "in MetricTag<" + typeNamesArray[i - 1] + "> " + argNamesArray[i - 1];
            getArgsArray[i - 1] = typeNamesArray[i - 1] + " " + argNamesArray[i - 1];
            createArgsArray[i - 1] = "key." + propNamesArray[i - 1];
            keyArray[i - 1] = typeNamesArray[i - 1] + " " + propNamesArray[i - 1];
        }

        var typeNames = String.Join(", ", typeNamesArray);
        var argNames = String.Join(", ", argNamesArray);
        var keys = String.Join(", ", keyArray);
        var ctorArgs = String.Join(", ", ctorArgsArray);
        var getArgs = String.Join(", ", getArgsArray);
        var createArgs = String.Join(", ", createArgsArray);
        var dictionaryKeyType = dimensions > 1 ? "(" + keys + ")" : "TTag1";
        var dictionaryType = "TaggedMetricDictionary<" + dictionaryKeyType + ">";
#>
    partial class MetricSource
    {
        /// <summary>
        /// Creates a new <see cref="AggregateGauge{<#= typeNames #>}" /> with the specified tags/aggregators and adds it to the <see cref="MetricSource" />.
        /// </summary>
        public virtual AggregateGauge<<#= typeNames #>> AddAggregateGauge<<#= typeNames #>>(IEnumerable<GaugeAggregator> aggregators, string name, string unit, string description, <#= ctorArgs #>) 
            => Add<AggregateGauge<<#= typeNames #>>, AggregateGauge>(new AggregateGauge<<#= typeNames #>>(aggregators, name, unit, description, <#= argNames #>, Options));

        /// <summary>
        /// Creates a new <see cref="AggregateGauge{<#= typeNames #>}" /> with the specified tags, using <see cref="GaugeAggregator.Default" /> aggregators and adds it to the <see cref="MetricSource" />.
        /// </summary>
        public virtual AggregateGauge<<#= typeNames #>> AddAggregateGauge<<#= typeNames #>>(string name, string unit, string description, <#= ctorArgs #>) 
            => Add<AggregateGauge<<#= typeNames #>>, AggregateGauge>(new AggregateGauge<<#= typeNames #>>(GaugeAggregator.Default, name, unit, description, <#= argNames #>, Options));

        /// <summary>
        /// Creates a new <see cref="Counter{<#= typeNames #>}" /> with the specified tags and adds it to the <see cref="MetricSource" />.
        /// </summary>
        public virtual Counter<<#= typeNames #>> AddCounter<<#= typeNames #>>(string name, string unit, string description, <#= ctorArgs #>) 
            => Add<Counter<<#= typeNames #>>, Counter>(new Counter<<#= typeNames #>>(name, unit, description, <#= argNames #>, Options));

        /// <summary>
        /// Creates a new <see cref="CumulativeCounter{<#= typeNames #>}" /> with the specified tags and adds it to the <see cref="MetricSource" />.
        /// </summary>
        public virtual CumulativeCounter<<#= typeNames #>> AddCumulativeCounter<<#= typeNames #>>(string name, string unit, string description, <#= ctorArgs #>) 
            => Add<CumulativeCounter<<#= typeNames #>>, CumulativeCounter>(new CumulativeCounter<<#= typeNames #>>(name, unit, description, <#= argNames #>, Options));

        /// <summary>
        /// Creates a new <see cref="EventGauge{<#= typeNames #>}" /> with the specified tags and adds it to the <see cref="MetricSource" />.
        /// </summary>
        public virtual EventGauge<<#= typeNames #>> AddEventGauge<<#= typeNames #>>(string name, string unit, string description, <#= ctorArgs #>) 
            => Add<EventGauge<<#= typeNames #>>, EventGauge>(new EventGauge<<#= typeNames #>>(name, unit, description, <#= argNames #>, Options));

        /// <summary>
        /// Creates a new <see cref="SamplingGauge{<#= typeNames #>}" /> with the specified tags and adds it to the <see cref="MetricSource" />.
        /// </summary>
        public virtual SamplingGauge<<#= typeNames #>> AddSamplingGauge<<#= typeNames #>>(string name, string unit, string description, <#= ctorArgs #>) 
            => Add<SamplingGauge<<#= typeNames #>>, SamplingGauge>(new SamplingGauge<<#= typeNames #>>(name, unit, description, <#= argNames #>, Options));

        /// <summary>
        /// Creates a new <see cref="SnapshotCounter{<#= typeNames #>}" /> with the specified tags and adds it to the <see cref="MetricSource" />.
        /// </summary>
        public virtual SnapshotCounter<<#= typeNames #>> AddSnapshotCounter<<#= typeNames #>>(Func<long?> getCountFunc, string name, string unit, string description, <#= ctorArgs #>) 
            => Add<SnapshotCounter<<#= typeNames #>>, SnapshotCounter>(new SnapshotCounter<<#= typeNames #>>(getCountFunc, name, unit, description, <#= argNames #>, Options));

        /// <summary>
        /// Creates a new <see cref="SnapshotGauge{<#= typeNames #>}" /> with the specified tags and adds it to the <see cref="MetricSource" />.
        /// </summary>
        public virtual SnapshotGauge<<#= typeNames #>> AddSnapshotGauge<<#= typeNames #>>(Func<double?> getValueFunc, string name, string unit, string description, <#= ctorArgs #>) 
            => Add<SnapshotGauge<<#= typeNames #>>, SnapshotGauge>(new SnapshotGauge<<#= typeNames #>>(getValueFunc, name, unit, description, <#= argNames #>, Options));
    }
    
    namespace Infrastructure
    {
        /// <summary>
        /// A set of time series which share the same metric name, but have different, strongly-typed tags.
        /// </summary>
        public abstract class TaggedMetricFactory<TMetric, <#= typeNames #>> : TaggedMetricFactory<TMetric> where TMetric : MetricBase
        {
            private readonly <#= dictionaryType #> _metrics = new <#= dictionaryType #>();

            /// <summary>
            /// Initializes the base class
            /// </summary>
            protected TaggedMetricFactory(string name, string unit, string description, MetricSourceOptions options, <#= ctorArgs #>) : base(name, unit, description, options)
            {
    <# for (var i = 0; i < dimensions; i++) { #>
            <#= propNamesArray[i] #> = TransformAndValidate(<#= argNamesArray[i] #>);
    <# } #>
        }

    <# for (var i = 0; i < dimensions; i++) { #>
        /// <summary>
            /// Gets metadata for the tag.
            /// </summary>
            public MetricTag<<#= typeNamesArray[i] #>> <#= propNamesArray[i] #> { get; }

    <# } #>
        /// <summary>
            /// Gets or adds a new metric for the specific permutation of tag values.
            /// </summary>
            protected TMetric GetOrAdd(<#= getArgs #>) => <# if (dimensions == 1) { #>
_metrics.GetOrAdd(<#=argNames#>, (key, factory) => factory.Create(key), this);
<# } else { #>
_metrics.GetOrAdd((<#=argNames#>), (key, factory) => factory.Create(<#=createArgs#>), this);
<# } #>

            /// <inheritdoc />
            protected override IEnumerable<TMetric> GetMetrics() => _metrics.Values;

            private TMetric Create(<#= getArgs #>)
            {
                var tags = ImmutableDictionary.CreateBuilder<string, string>();
    <# for (var i = 0; i < dimensions; i++) { #>
            tags[<#= propNamesArray[i] #>.Name] = TransformAndValidate(<#= propNamesArray[i] #>.Name, <#= argNamesArray[i] #>);
    <# } #>
            return Create(tags.ToImmutable());
            }
        }
    }

    namespace Metrics
    {
        using StackExchange.Metrics.Handlers;
        using StackExchange.Metrics.Infrastructure;

        /// <summary>
        /// A general-purpose manually incremented long-integer counter.
        /// See https://github.com/StackExchange/StackExchange.Metrics/blob/master/docs/MetricTypes.md#counter
        /// </summary>
        public sealed class Counter<<#= typeNames #>> : TaggedMetricFactory<Counter, <#= typeNames #>>
        {
            internal Counter(string name, string unit, string description, <#= ctorArgs #>, MetricSourceOptions options) : base(name, unit, description, options, <#= argNames #>) { }

            /// <summary>
            /// Increments the counter with the specified permutation of tags by <paramref name="amount" />.
            /// </summary>
            public void Increment(<#= getArgs #>, long amount = 1) => GetOrAdd(<#= argNames #>).Increment(amount);

            /// <inheritdoc />
            protected override Counter Create(ImmutableDictionary<string, string> tags) => new Counter(Name, Unit, Description, Options, tags);
        }

        /// <summary>
        /// A counter that is recorded using the deltas everytime it is incremented . Used for very low-volume events.
        /// </summary>
        /// <remarks>
        /// When using a Bosun endpoint <see cref="BosunMetricHandler.EnableExternalCounters"/> must be true
        /// to be reported. You'll also need to make sure your infrastructure is setup with external counters enabled. This currently requires using tsdbrelay.
        /// See https://github.com/StackExchange/StackExchange.Metrics/blob/master/docs/MetricTypes.md#externalcounter
        /// </remarks>
        public sealed class CumulativeCounter<<#= typeNames #>> : TaggedMetricFactory<CumulativeCounter, <#= typeNames #>>
        {
            internal CumulativeCounter(string name, string unit, string description, <#= ctorArgs #>, MetricSourceOptions options) : base(name, unit, description, options, <#= argNames #>) { }

            /// <summary>
            /// Increments the counter with the specified permutation of tags by 1.
            /// </summary>
            public void Increment(<#= getArgs #>) => GetOrAdd(<#= argNames #>).Increment();

            /// <inheritdoc />
            protected override CumulativeCounter Create(ImmutableDictionary<string, string> tags) => new CumulativeCounter(Name, Unit, Description, Options, tags);
        }

        /// <summary>
        /// Every data point results in a <see cref="MetricReading"/>. Good for low-volume events.
        /// See https://github.com/StackExchange/StackExchange.Metrics/blob/master/docs/MetricTypes.md#eventgauge
        /// </summary>
        public sealed class EventGauge<<#= typeNames #>> : TaggedMetricFactory<EventGauge, <#= typeNames #>>
        {
            internal EventGauge(string name, string unit, string description, <#= ctorArgs #>, MetricSourceOptions options) : base(name, unit, description, options, <#= argNames #>) { }

            /// <summary>
            /// Records a data point which will be sent to metrics handlers.
            /// </summary>
            public void Record(<#= getArgs #>, double value) => Record(<#= argNames #>, value, DateTime.UtcNow);

            /// <summary>
            /// Records a data point with an explicit timestamp which will be sent to metrics handlers.
            /// </summary>
            public void Record(<#= getArgs #>, double value, DateTime time) => GetOrAdd(<#= argNames #>).Record(value, time);

            /// <inheritdoc />
            protected override EventGauge Create(ImmutableDictionary<string, string> tags) => new EventGauge(Name, Unit, Description, Options, tags);
        }

        /// <summary>
        /// Record as often as you want, but only the last value recorded before the reporting interval is sent to an endpoint (it samples the current value).
        /// See https://github.com/StackExchange/StackExchange.Metrics/blob/master/docs/MetricTypes.md#samplinggauge
        /// </summary>
        public sealed class SamplingGauge<<#= typeNames #>> : TaggedMetricFactory<SamplingGauge, <#= typeNames #>>
        {
            internal SamplingGauge(string name, string unit, string description, <#= ctorArgs #>, MetricSourceOptions options) : base(name, unit, description, options, <#= argNames #>) { }

            /// <summary>
            /// Records the current value of the gauge. Use Double.NaN to disable this gauge.
            /// </summary>
            public void Record(<#= getArgs #>, double value) => GetOrAdd(<#= argNames #>).Record(value);

            /// <inheritdoc />
            protected override SamplingGauge Create(ImmutableDictionary<string, string> tags) => new SamplingGauge(Name, Unit, Description, Options, tags);
        }

        /// <summary>
        /// Calls a user-provided Func&lt;long?&gt; to get the current counter value each time metrics are going to be posted to a metrics handler.
        /// See https://github.com/StackExchange/StackExchange.Metrics/blob/master/docs/MetricTypes.md#snapshotcounter
        /// </summary>
        public sealed class SnapshotCounter<<#= typeNames #>> : TaggedMetricFactory<SnapshotCounter, <#= typeNames #>>
        {
            private readonly Func<long?> _getCountFunc;

            internal SnapshotCounter(Func<long?> getCountFunc, string name, string unit, string description, <#= ctorArgs #>, MetricSourceOptions options) : base(name, unit, description, options, <#= argNames #>)
            {
                if (getCountFunc == null)
                {
                    throw new ArgumentNullException(nameof(getCountFunc));
                }

                _getCountFunc = getCountFunc;
            }

            /// <summary>
            /// Gets the <see cref="SnapshotCounter" /> for the specified tags.
            /// </summary>
            public SnapshotCounter Get(<#= getArgs #>) => GetOrAdd(<#= argNames #>);

            /// <inheritdoc />
            protected override SnapshotCounter Create(ImmutableDictionary<string, string> tags) => new SnapshotCounter(_getCountFunc, Name, Unit, Description, Options, tags);
        }

        /// <summary>
        /// Similar to a SnapshotCounter, it calls a user provided Func&lt;double?&gt; to get the current gauge value each time metrics are going to be posted to
        /// a metrics handler. See https://github.com/StackExchange/StackExchange.Metrics/blob/master/docs/MetricTypes.md#snapshotgauge
        /// </summary>
        public sealed class SnapshotGauge<<#= typeNames #>> : TaggedMetricFactory<SnapshotGauge, <#= typeNames #>>
        {
            private readonly Func<double?> _getValueFunc;

            internal SnapshotGauge(Func<double?> getValueFunc, string name, string unit, string description, <#= ctorArgs #>, MetricSourceOptions options) : base(name, unit, description, options, <#= argNames #>)
            {
                if (getValueFunc == null)
                {
                    throw new ArgumentNullException(nameof(getValueFunc));
                }

                _getValueFunc = getValueFunc;
            }

            /// <summary>
            /// Gets the <see cref="SnapshotGauge" /> for the specified tags.
            /// </summary>
            public SnapshotGauge Get(<#= getArgs #>) => GetOrAdd(<#= argNames #>);

            /// <inheritdoc />
            protected override SnapshotGauge Create(ImmutableDictionary<string, string> tags) => new SnapshotGauge(_getValueFunc, Name, Unit, Description, Options, tags);
        }

        /// <summary>
        /// Aggregates data points (min, max, avg, median, etc) before sending them to a handler. Good for recording high-volume events.
        /// See https://github.com/StackExchange/StackExchange.Metrics/blob/master/docs/MetricTypes.md#aggregategauge
        /// </summary>
        public sealed class AggregateGauge<<#= typeNames #>> : TaggedMetricFactory<AggregateGauge, <#= typeNames #>>
        {
            private readonly IEnumerable<GaugeAggregator> _aggregators;

            internal AggregateGauge(IEnumerable<GaugeAggregator> aggregators, string name, string unit, string description, <#= ctorArgs #>, MetricSourceOptions options) : base(name, unit, description, options, <#= argNames #>)
            {
                _aggregators = aggregators;
            }

            /// <summary>
            /// Records the current value of the gauge. Use Double.NaN to disable this gauge.
            /// </summary>
            public void Record(<#= getArgs #>, double value) => GetOrAdd(<#= argNames #>).Record(value);

            /// <inheritdoc />
            protected override AggregateGauge Create(ImmutableDictionary<string, string> tags) => new AggregateGauge(_aggregators, Name, Unit, Description, Options, tags);
        }
    }
<#
    } // end template for loop
#>
}